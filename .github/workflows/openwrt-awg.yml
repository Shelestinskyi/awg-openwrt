name: Create Release Mediatek Filogic
on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main

jobs:
  build:
    name: "v${{ matrix.tag }} - ${{ matrix.pkgarch }} :: ${{ matrix.target }}/${{ matrix.subtarget }} build"
    runs-on: Linux
    strategy:
      matrix:
        tag: ['23.05.4']
        pkgarch: ['aarch64_cortex-a53']
        target: ['mediatek']
        subtarget: ['filogic']
    steps:
      - uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: v${{ matrix.tag }}
          fetch-depth: 0

      - name: Update and install feeds for OpenWRT_v${{ matrix.tag }} ${{ matrix.target }}/${{ matrix.subtarget }}
        run: |
          pkgarch=${{ matrix.pkgarch }}
          target=${{ matrix.target }}
          subtarget=${{ matrix.subtarget }}
          echo "pkgarch: ${pkgarch}, target: ${target}, subtarget: ${subtarget}"
          rm -rf bin/packages/${pkgarch}/awgopenwrt/ || true
          rm -rf bin/targets/${target}/${subtarget}/packages/ || true
          wget https://downloads.openwrt.org/releases/${{ matrix.tag }}/targets/${target}/${subtarget}/feeds.buildinfo -O feeds.conf
          echo "src-git awgopenwrt https://github.com/lolo6oT/awg-openwrt.git" >> ./feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          wget https://downloads.openwrt.org/releases/${{ matrix.tag }}/targets/${target}/${subtarget}/config.buildinfo -O .config
          make defconfig

      - name: Trigger Compilation
        run: |
          echo "Starting compilation..."
          export FORCE_UNSAFE_CONFIGURE=1
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config
          if [[ $(uname -m) == "aarch64" ]]; then
            echo 'CONFIG_GOLANG_EXTERNAL_BOOTSTRAP_ROOT="/usr/local/go/bin/go"' >> .config
            echo 'CONFIG_GOLANG_BUILD_CACHE_DIR=""' >> .config
          fi
          make defconfig

          # Added logging to ensure make commands are visible
          echo "Downloading packages..."
          make -j $(nproc) V=sc download world || { echo "Download failed"; exit 1; }

      - name: Make ipks amnezia_${{ github.ref_name }} for original OpenWRT_v${{ matrix.tag }} ${{ matrix.target }}/${{ matrix.subtarget }}
        run: |
          echo "Building IPK packages..."
          make -j $(nproc) package/amneziawg-tools/{clean,download,prepare,compile} || { echo "Building amneziawg-tools failed"; exit 1; }
          make -j $(nproc) package/amneziawg-go/{clean,download,prepare,compile} || { echo "Building amneziawg-go failed"; exit 1; }
          make -j $(nproc) package/kmod-amneziawg/{clean,download,prepare,compile} || { echo "Building kmod-amneziawg failed"; exit 1; }
          make -j $(nproc) package/luci-proto-amneziawg/{clean,download,prepare,compile} || { echo "Building luci-proto-amneziawg failed"; exit 1; }

      - name: Prepare artifacts OpenWRT_v${{ matrix.tag }} ${{ matrix.target }}/${{ matrix.subtarget }}
        run: |
          tag_name=${{ github.ref_name }}
          mkdir -p awgrelease
          postfix="${tag_name}_v${{ matrix.tag }}_${{ matrix.pkgarch }}_${{ matrix.target }}_${{ matrix.subtarget }}"
          cp bin/packages/${{ matrix.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.pkgarch }}/awgopenwrt/amneziawg-go_*.ipk awgrelease/amneziawg-go_${postfix}.ipk
          cp bin/packages/${{ matrix.pkgarch }}/awgopenwrt/luci-proto-amneziawg_*.ipk awgrelease/luci-proto-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk

      - name: Cleanup
        run: |
          rm feeds.conf || true
          rm -rf awgrelease || true
